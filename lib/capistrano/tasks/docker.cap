Rake::Task["deploy"].clear_actions

desc "deploy"
task :deploy do
  invoke "docker:check"
  invoke "docker:updating"
  invoke "docker:setup"
  invoke "docker:build"
end

desc "Clean old docker images"
task :clean do
  on roles(:web) do
    begin
      execute "cd #{repo_path} && docker rmi  -f $(docker images | \
        grep \'^<none>\' | awk '{print $3}')"
      execute "cd #{repo_path} && docker ps -a | grep 'byeo_web' | \
        grep 'days ago' | awk '{print $1}' | xargs docker rm"
    rescue
    end
  end
end

desc "Start new container"
task :start do
  on roles(:web) do
    execute "cd #{repo_path} && docker-compose stop web"
    execute "cd #{repo_path} && docker-compose rm -f web"
    execute "cd #{repo_path} && docker-compose up -d"
  end
end

namespace :git do
  desc 'Clone the repo to the cache'
  task custom_clone: :'git:wrapper' do
    on release_roles :all do
      if strategy.test
        info t(:mirror_exists, at: repo_path)
      else
        within deploy_path do
          with fetch(:git_environmental_variables) do
            strategy.clone
          end
        end
        within repo_path do
          with fetch(:git_environmental_variables) do
            strategy.checkout
          end
        end
      end
    end
  end

  desc "Update the repo mirror to reflect the origin state"
  task custom_update: :"git:wrapper" do
    on release_roles :all do
      within repo_path do
        with fetch(:git_environmental_variables) do
          strategy.update
        end
      end
    end
  end
end

namespace :docker do
  desc "Build docker containers"
  task :build do
    on roles(:web) do
      execute "cd #{repo_path} && docker-compose build"
      execute "cd #{repo_path} && docker-compose run web bundle exec \
        rake db:migrate assets:precompile"
    end
  end

  desc "Update configuration files"
  task :setup do
    # invoke "deploy:symlink:linked_files"
    # invoke "deploy:symlink:linked_dirs"
    # invoke "docker:copy_files"
  end

  desc "Update source code"
  task :updating do
    on roles(:web) do
      if test "[ -d #{repo_path} ]"
        invoke "#{scm}:custom_update"
      else
        invoke "#{scm}:custom_clone"
      end
    end
  end

  desc "Check required directories"
  task :check do
    invoke "docker:check:directories"
    # invoke "deploy:check:linked_dirs"
    # invoke "deploy:check:make_linked_dirs"
    # invoke "deploy:check:linked_files"
  end

  desc 'Copy files'
  task :copy_files do
    next unless any? :copy_files
    on release_roles :all do
      fetch(:copy_files).each do |file|
        target = release_path.join(file)
        source = shared_path.join(file)
        unless test "[ -L #{target} ]"
          if test "[ -f #{target} ]"
            execute :rm, target
          end
          execute :cp, source, target
        end
      end
    end
  end

  namespace :check do
    desc "Check shared and release directories exists"
    task :directories do
      on release_roles :all do
        execute :mkdir, "-p", deploy_path, shared_path
      end
    end
  end
end
